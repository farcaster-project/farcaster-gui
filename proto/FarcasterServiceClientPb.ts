/**
 * @fileoverview gRPC-Web generated client stub for farcaster
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.9
// source: farcaster.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as farcaster_pb from './farcaster_pb';


export class FarcasterClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorInfo = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/Info',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.InfoRequest,
    farcaster_pb.InfoResponse,
    (request: farcaster_pb.InfoRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.InfoResponse.deserializeBinary
  );

  info(
    request: farcaster_pb.InfoRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.InfoResponse>;

  info(
    request: farcaster_pb.InfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.InfoResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.InfoResponse>;

  info(
    request: farcaster_pb.InfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.InfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/Info',
        request,
        metadata || {},
        this.methodDescriptorInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/Info',
    request,
    metadata || {},
    this.methodDescriptorInfo);
  }

  methodDescriptorPeers = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/Peers',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.PeersRequest,
    farcaster_pb.PeersResponse,
    (request: farcaster_pb.PeersRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.PeersResponse.deserializeBinary
  );

  peers(
    request: farcaster_pb.PeersRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.PeersResponse>;

  peers(
    request: farcaster_pb.PeersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.PeersResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.PeersResponse>;

  peers(
    request: farcaster_pb.PeersRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.PeersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/Peers',
        request,
        metadata || {},
        this.methodDescriptorPeers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/Peers',
    request,
    metadata || {},
    this.methodDescriptorPeers);
  }

  methodDescriptorSwapInfo = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/SwapInfo',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.SwapInfoRequest,
    farcaster_pb.SwapInfoResponse,
    (request: farcaster_pb.SwapInfoRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.SwapInfoResponse.deserializeBinary
  );

  swapInfo(
    request: farcaster_pb.SwapInfoRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.SwapInfoResponse>;

  swapInfo(
    request: farcaster_pb.SwapInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.SwapInfoResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.SwapInfoResponse>;

  swapInfo(
    request: farcaster_pb.SwapInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.SwapInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/SwapInfo',
        request,
        metadata || {},
        this.methodDescriptorSwapInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/SwapInfo',
    request,
    metadata || {},
    this.methodDescriptorSwapInfo);
  }

  methodDescriptorDealInfo = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/DealInfo',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.DealInfoRequest,
    farcaster_pb.DealInfoResponse,
    (request: farcaster_pb.DealInfoRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.DealInfoResponse.deserializeBinary
  );

  dealInfo(
    request: farcaster_pb.DealInfoRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.DealInfoResponse>;

  dealInfo(
    request: farcaster_pb.DealInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.DealInfoResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.DealInfoResponse>;

  dealInfo(
    request: farcaster_pb.DealInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.DealInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/DealInfo',
        request,
        metadata || {},
        this.methodDescriptorDealInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/DealInfo',
    request,
    metadata || {},
    this.methodDescriptorDealInfo);
  }

  methodDescriptorCheckpoints = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/Checkpoints',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.CheckpointsRequest,
    farcaster_pb.CheckpointsResponse,
    (request: farcaster_pb.CheckpointsRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.CheckpointsResponse.deserializeBinary
  );

  checkpoints(
    request: farcaster_pb.CheckpointsRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.CheckpointsResponse>;

  checkpoints(
    request: farcaster_pb.CheckpointsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.CheckpointsResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.CheckpointsResponse>;

  checkpoints(
    request: farcaster_pb.CheckpointsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.CheckpointsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/Checkpoints',
        request,
        metadata || {},
        this.methodDescriptorCheckpoints,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/Checkpoints',
    request,
    metadata || {},
    this.methodDescriptorCheckpoints);
  }

  methodDescriptorRestoreCheckpoint = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/RestoreCheckpoint',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.RestoreCheckpointRequest,
    farcaster_pb.RestoreCheckpointResponse,
    (request: farcaster_pb.RestoreCheckpointRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.RestoreCheckpointResponse.deserializeBinary
  );

  restoreCheckpoint(
    request: farcaster_pb.RestoreCheckpointRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.RestoreCheckpointResponse>;

  restoreCheckpoint(
    request: farcaster_pb.RestoreCheckpointRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.RestoreCheckpointResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.RestoreCheckpointResponse>;

  restoreCheckpoint(
    request: farcaster_pb.RestoreCheckpointRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.RestoreCheckpointResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/RestoreCheckpoint',
        request,
        metadata || {},
        this.methodDescriptorRestoreCheckpoint,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/RestoreCheckpoint',
    request,
    metadata || {},
    this.methodDescriptorRestoreCheckpoint);
  }

  methodDescriptorFundingAddresses = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/FundingAddresses',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.FundingAddressesRequest,
    farcaster_pb.FundingAddressesResponse,
    (request: farcaster_pb.FundingAddressesRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.FundingAddressesResponse.deserializeBinary
  );

  fundingAddresses(
    request: farcaster_pb.FundingAddressesRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.FundingAddressesResponse>;

  fundingAddresses(
    request: farcaster_pb.FundingAddressesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.FundingAddressesResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.FundingAddressesResponse>;

  fundingAddresses(
    request: farcaster_pb.FundingAddressesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.FundingAddressesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/FundingAddresses',
        request,
        metadata || {},
        this.methodDescriptorFundingAddresses,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/FundingAddresses',
    request,
    metadata || {},
    this.methodDescriptorFundingAddresses);
  }

  methodDescriptorMake = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/Make',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.MakeRequest,
    farcaster_pb.MakeResponse,
    (request: farcaster_pb.MakeRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.MakeResponse.deserializeBinary
  );

  make(
    request: farcaster_pb.MakeRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.MakeResponse>;

  make(
    request: farcaster_pb.MakeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.MakeResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.MakeResponse>;

  make(
    request: farcaster_pb.MakeRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.MakeResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/Make',
        request,
        metadata || {},
        this.methodDescriptorMake,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/Make',
    request,
    metadata || {},
    this.methodDescriptorMake);
  }

  methodDescriptorTake = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/Take',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.TakeRequest,
    farcaster_pb.TakeResponse,
    (request: farcaster_pb.TakeRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.TakeResponse.deserializeBinary
  );

  take(
    request: farcaster_pb.TakeRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.TakeResponse>;

  take(
    request: farcaster_pb.TakeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.TakeResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.TakeResponse>;

  take(
    request: farcaster_pb.TakeRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.TakeResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/Take',
        request,
        metadata || {},
        this.methodDescriptorTake,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/Take',
    request,
    metadata || {},
    this.methodDescriptorTake);
  }

  methodDescriptorRevokeDeal = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/RevokeDeal',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.RevokeDealRequest,
    farcaster_pb.RevokeDealResponse,
    (request: farcaster_pb.RevokeDealRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.RevokeDealResponse.deserializeBinary
  );

  revokeDeal(
    request: farcaster_pb.RevokeDealRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.RevokeDealResponse>;

  revokeDeal(
    request: farcaster_pb.RevokeDealRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.RevokeDealResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.RevokeDealResponse>;

  revokeDeal(
    request: farcaster_pb.RevokeDealRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.RevokeDealResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/RevokeDeal',
        request,
        metadata || {},
        this.methodDescriptorRevokeDeal,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/RevokeDeal',
    request,
    metadata || {},
    this.methodDescriptorRevokeDeal);
  }

  methodDescriptorAbortSwap = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/AbortSwap',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.AbortSwapRequest,
    farcaster_pb.AbortSwapResponse,
    (request: farcaster_pb.AbortSwapRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.AbortSwapResponse.deserializeBinary
  );

  abortSwap(
    request: farcaster_pb.AbortSwapRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.AbortSwapResponse>;

  abortSwap(
    request: farcaster_pb.AbortSwapRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.AbortSwapResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.AbortSwapResponse>;

  abortSwap(
    request: farcaster_pb.AbortSwapRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.AbortSwapResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/AbortSwap',
        request,
        metadata || {},
        this.methodDescriptorAbortSwap,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/AbortSwap',
    request,
    metadata || {},
    this.methodDescriptorAbortSwap);
  }

  methodDescriptorProgress = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/Progress',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.ProgressRequest,
    farcaster_pb.ProgressResponse,
    (request: farcaster_pb.ProgressRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.ProgressResponse.deserializeBinary
  );

  progress(
    request: farcaster_pb.ProgressRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.ProgressResponse>;

  progress(
    request: farcaster_pb.ProgressRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.ProgressResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.ProgressResponse>;

  progress(
    request: farcaster_pb.ProgressRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.ProgressResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/Progress',
        request,
        metadata || {},
        this.methodDescriptorProgress,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/Progress',
    request,
    metadata || {},
    this.methodDescriptorProgress);
  }

  methodDescriptorNeedsFunding = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/NeedsFunding',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.NeedsFundingRequest,
    farcaster_pb.NeedsFundingResponse,
    (request: farcaster_pb.NeedsFundingRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.NeedsFundingResponse.deserializeBinary
  );

  needsFunding(
    request: farcaster_pb.NeedsFundingRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.NeedsFundingResponse>;

  needsFunding(
    request: farcaster_pb.NeedsFundingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.NeedsFundingResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.NeedsFundingResponse>;

  needsFunding(
    request: farcaster_pb.NeedsFundingRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.NeedsFundingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/NeedsFunding',
        request,
        metadata || {},
        this.methodDescriptorNeedsFunding,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/NeedsFunding',
    request,
    metadata || {},
    this.methodDescriptorNeedsFunding);
  }

  methodDescriptorSweepAddress = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/SweepAddress',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.SweepAddressRequest,
    farcaster_pb.SweepAddressResponse,
    (request: farcaster_pb.SweepAddressRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.SweepAddressResponse.deserializeBinary
  );

  sweepAddress(
    request: farcaster_pb.SweepAddressRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.SweepAddressResponse>;

  sweepAddress(
    request: farcaster_pb.SweepAddressRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.SweepAddressResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.SweepAddressResponse>;

  sweepAddress(
    request: farcaster_pb.SweepAddressRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.SweepAddressResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/SweepAddress',
        request,
        metadata || {},
        this.methodDescriptorSweepAddress,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/SweepAddress',
    request,
    metadata || {},
    this.methodDescriptorSweepAddress);
  }

  methodDescriptorConnectSwap = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/ConnectSwap',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.ConnectSwapRequest,
    farcaster_pb.ConnectSwapResponse,
    (request: farcaster_pb.ConnectSwapRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.ConnectSwapResponse.deserializeBinary
  );

  connectSwap(
    request: farcaster_pb.ConnectSwapRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.ConnectSwapResponse>;

  connectSwap(
    request: farcaster_pb.ConnectSwapRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.ConnectSwapResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.ConnectSwapResponse>;

  connectSwap(
    request: farcaster_pb.ConnectSwapRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.ConnectSwapResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/ConnectSwap',
        request,
        metadata || {},
        this.methodDescriptorConnectSwap,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/ConnectSwap',
    request,
    metadata || {},
    this.methodDescriptorConnectSwap);
  }

  methodDescriptorListDeals = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/ListDeals',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.ListDealsRequest,
    farcaster_pb.ListDealsResponse,
    (request: farcaster_pb.ListDealsRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.ListDealsResponse.deserializeBinary
  );

  listDeals(
    request: farcaster_pb.ListDealsRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.ListDealsResponse>;

  listDeals(
    request: farcaster_pb.ListDealsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.ListDealsResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.ListDealsResponse>;

  listDeals(
    request: farcaster_pb.ListDealsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.ListDealsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/ListDeals',
        request,
        metadata || {},
        this.methodDescriptorListDeals,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/ListDeals',
    request,
    metadata || {},
    this.methodDescriptorListDeals);
  }

  methodDescriptorHealthCheck = new grpcWeb.MethodDescriptor(
    '/farcaster.Farcaster/HealthCheck',
    grpcWeb.MethodType.UNARY,
    farcaster_pb.HealthCheckRequest,
    farcaster_pb.HealthCheckResponse,
    (request: farcaster_pb.HealthCheckRequest) => {
      return request.serializeBinary();
    },
    farcaster_pb.HealthCheckResponse.deserializeBinary
  );

  healthCheck(
    request: farcaster_pb.HealthCheckRequest,
    metadata: grpcWeb.Metadata | null): Promise<farcaster_pb.HealthCheckResponse>;

  healthCheck(
    request: farcaster_pb.HealthCheckRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: farcaster_pb.HealthCheckResponse) => void): grpcWeb.ClientReadableStream<farcaster_pb.HealthCheckResponse>;

  healthCheck(
    request: farcaster_pb.HealthCheckRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: farcaster_pb.HealthCheckResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/farcaster.Farcaster/HealthCheck',
        request,
        metadata || {},
        this.methodDescriptorHealthCheck,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/farcaster.Farcaster/HealthCheck',
    request,
    metadata || {},
    this.methodDescriptorHealthCheck);
  }

}

