syntax = "proto3";
package farcaster;

service Farcaster {
    rpc Info(InfoRequest) returns (InfoResponse){}
    rpc Peers(PeersRequest) returns (PeersResponse){}
    rpc SwapInfo(SwapInfoRequest) returns (SwapInfoResponse){}
    rpc DealInfo(DealInfoRequest) returns (DealInfoResponse){}
    rpc Checkpoints(CheckpointsRequest) returns (CheckpointsResponse){}
    rpc RestoreCheckpoint(RestoreCheckpointRequest) returns (RestoreCheckpointResponse){}
    rpc FundingAddresses(FundingAddressesRequest) returns (FundingAddressesResponse){}
    rpc Make(MakeRequest) returns (MakeResponse){}
    rpc Take(TakeRequest) returns (TakeResponse){}
    rpc RevokeDeal(RevokeDealRequest) returns (RevokeDealResponse){}
    rpc AbortSwap(AbortSwapRequest) returns (AbortSwapResponse){}
    rpc Progress(ProgressRequest) returns (ProgressResponse){}
    rpc NeedsFunding(NeedsFundingRequest) returns (NeedsFundingResponse){}
    rpc SweepAddress(SweepAddressRequest) returns (SweepAddressResponse){}
    rpc ConnectSwap(ConnectSwapRequest) returns (ConnectSwapResponse){}
    rpc ListDeals(ListDealsRequest) returns (ListDealsResponse){}
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse){}
}

message HealthCheckRequest {
    uint32 id = 1;
    NetworkSelector selector = 2;
}

enum NetworkSelector {
    ALL_NETWORKS = 0;
    MAINNET_NETWORKS = 1;
    TESTNET_NETWORKS = 2;
    LOCAL_NETWORKS = 3;
}

message HealthCheckResponse {
    uint32 id = 1;
    oneof health_report {
        CompleteHealthReport complete_health_report = 2;
        ReducedHealthReport reduced_health_report = 3;
    }
}

message CompleteHealthReport {
    string bitcoin_mainnet_health = 2;
    string bitcoin_testnet_health = 3;
    string bitcoin_local_health = 4;
    string monero_mainnet_health = 5;
    string monero_testnet_health = 6;
    string monero_local_health = 7;   
}

message ReducedHealthReport {
    string bitcoin_health = 2;
    string monero_health = 7;
}

message InfoRequest {
    uint32 id = 1;
}

message InfoResponse {
    uint32 id = 1;
    repeated string listens = 3;
    uint64 uptime = 4;
    uint64 since = 5;
    repeated string peers = 6;
    repeated string swaps = 7;
    repeated string deals = 8;
}

message SwapInfoRequest {
    uint32 id = 1;
    string swap_id = 2;
}

message SwapInfoResponse {
    uint32 id = 1;
    string connection = 2;
    uint64 uptime = 3;
    uint64 since= 4;
    DealInfo deal = 5;
    bool connected = 6;
    TradeRole trade_role = 7;
    SwapRole swap_role = 8;
    string connected_counterparty_node_id = 9;
    string state = 10;
}

message DealInfoRequest {
    uint32 id = 1;
    string deal = 2;
}

message DealInfoResponse {
    uint32 id = 1;
    DeserializedDeal deserialized_deal = 2;
    string deal = 3;
}

message DealInfo {
    DeserializedDeal deserialized_deal = 1;
    string serialized_deal = 2;
    TradeRole local_trade_role = 3;
    DealStatus deal_status = 4;
}

message DeserializedDeal {
    uint64 arbitrating_amount = 1;
    uint64 accordant_amount = 2;
    uint32 cancel_timelock = 3;
    uint32 punish_timelock = 4;
    string fee_strategy = 5;
    SwapRole maker_role = 6;
    string uuid = 7;
    Network network = 8;
    Blockchain arbitrating_blockchain = 9;
    Blockchain accordant_blockchain = 10;
    string node_id = 11;
    string peer_address = 12;
}

enum DealStatus {
    DEAL_OPEN = 0;
    DEAL_IN_PROGRESS = 1;
    DEAL_REVOKED = 2;
    DEAL_ENDED_SUCCESS_SWAP = 3;
    DEAL_ENDED_FAILURE_REFUND = 4;
    DEAL_ENDED_FAILURE_PUNISH = 5;
    DEAL_ENDED_FAILURE_ABORT = 6;
}

message PeersRequest {
    uint32 id = 1;
}

message PeersResponse {
    uint32 id = 1;
    repeated string peers = 2;
}

message ListDealsRequest {
    uint32 id = 1;
    DealSelector deal_selector = 2;
    NetworkSelector network_selector = 3;
}

enum DealSelector {
    OPEN_DEALS = 0;
    IN_PROGRESS_DEALS = 1;
    ENDED_DEALS = 2;
    ALL_DEALS = 3;
}

message ListDealsResponse {
    uint32 id = 1;
    repeated DealInfo deals = 2;
}

message CheckpointsRequest {
    uint32 id = 1;
    CheckpointSelector checkpoint_selector = 2;
    NetworkSelector network_selector = 3;
}

message CheckpointsResponse {
    uint32 id = 1;
    repeated CheckpointEntry checkpoint_entries = 2;
}

enum CheckpointSelector {
    ALL_CHECKPOINTS = 0;
    AVAILABLE_FOR_RESTORE = 1;
}

message CheckpointEntry {
    string swap_id = 1;
    DealInfo deal = 2;
    TradeRole trade_role = 3;
}

enum TradeRole {
    MAKER = 0;
    TAKER = 1;
}

message RestoreCheckpointRequest {
    uint32 id = 1;
    string swap_id = 2;
}

message RestoreCheckpointResponse {
    uint32 id = 1;
    string status = 2;
}

message FundingAddressesRequest {
    uint32 id = 1;
    Blockchain blockchain = 2;
    NetworkSelector network_selector = 3;
}

message FundingAddressesResponse {
    uint32 id = 1;
    repeated AddressSwapIdPair addresses = 2;
}

message AddressSwapIdPair {
    string address = 1;
    oneof address_swap_id {
        string swap_id = 2;
    }
}

message MakeRequest {
    uint32 id = 1;
    Network network = 2;
    Blockchain accordant_blockchain = 3;
    Blockchain arbitrating_blockchain = 4;
    uint64 accordant_amount = 5;
    uint64 arbitrating_amount = 6;
    string arbitrating_addr = 7;
    string accordant_addr = 8;
    uint32 cancel_timelock = 9;
    uint32 punish_timelock = 10;
    string fee_strategy = 11;
    SwapRole maker_role = 12;
    string public_ip_addr = 13;
    uint32 public_port = 14;
}
 
message MakeResponse {
    uint32 id = 1;
    DeserializedDeal deserialized_deal = 2;
    string deal = 3;
}

message TakeRequest {
    uint32 id = 1;
    string deal = 2;
    string bitcoin_address = 3;
    string monero_address = 4;
}

message TakeResponse {
    uint32 id = 1;
}

message RevokeDealRequest {
    uint32 id = 1;
    string deal = 2;
}

message RevokeDealResponse {
    uint32 id = 1;
}

message AbortSwapRequest {
    uint32 id = 1;
    string swap_id = 2;
}

message AbortSwapResponse {
    uint32 id = 1;
}

message ProgressRequest {
    uint32 id = 1;
    string swap_id = 2;
}

message ProgressResponse {
    uint32 id = 1;
    repeated Progress progress = 2;
}

message Progress {
    oneof progress {
        string message = 1;
        State state_update = 2;
        StateTransition state_transition = 3;
        string failure = 4;
        string success = 5;
    }
}

message StateTransition {
    State old_state = 1;
    State new_state = 2;
}

message State {
    string state = 1;
    uint64 arb_block_height = 2;
    uint64 acc_block_height = 3;
    bool arb_locked = 4;
    bool acc_locked = 5;
    bool canceled = 6;
    bool buy_seen = 7;
    bool refund_seen = 8;
    bool overfunded = 9;
    oneof arb_lock_confirmations {
        uint32 arb_confs = 10;
    }
    oneof acc_lock_confirmations {
        uint32 acc_confs = 11;
    }
    oneof cancel_confirmations {
        uint32 cancel_confs = 12;
    }
    oneof blocks_until_cancel_possible {
        int64 cancel_blocks = 13;
    }
    oneof blocks_until_punish_possible {
        int64 punish_blocks = 14;
    }
    oneof blocks_until_safe_buy {
        uint32 buy_blocks = 15;
    }
    oneof blocks_until_safe_monero_buy_sweep {
        uint32 buy_monero_blocks = 16;
    }
}

enum Outcome {
    SuccessSwap = 0;
    FailureRefund = 1;
    FailurePunish = 2;
    FailureAbort = 3;
}

message ConnectSwapRequest {
    uint32 id = 1;
    string swap_id = 2;
}

message ConnectSwapResponse {
    uint32 id = 1;
}

message NeedsFundingRequest {
    uint32 id = 1;
    Blockchain blockchain = 2;
    NetworkSelector network_selector = 3;
}

message NeedsFundingResponse {
    uint32 id = 1;
    repeated FundingInfo funding_infos = 2;
}

message FundingInfo {
    string swap_id = 1;
    string address = 2;
    uint64 amount = 3;
}

message SweepAddressRequest {
    uint32 id = 1;
    string source_address = 2;
    string destination_address = 3;
}

message SweepAddressResponse {
    uint32 id = 1;
    string message = 2;
}

enum SwapRole {
    ALICE = 0;
    BOB = 1;
}

enum Network {
    MAINNET = 0;
    TESTNET = 1;
    LOCAL = 2;
}

enum Blockchain {
    BITCOIN = 0;
    MONERO = 1;
}
